{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Inspector Network Reachability Demo CloudFormation Template: Create an architecture that contains multiple network topographies and various misconfigurations. Includes Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters" : {
    "PassedKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair.",
	  "AllowedPattern" : ".+"
    },
	"AvailabilityZone1": {
		"Type" : "AWS::EC2::AvailabilityZone::Name",
		"Description" : "Pick your primary Availability Zone.",
		"AllowedPattern" : ".+"
	},
	"AvailabilityZone2": {
		"Type" : "AWS::EC2::AvailabilityZone::Name",
		"Description" : "Pick your secondary Availability Zone.",
		"ConstraintDescription" : "Please pick a different Availability Zone than your Primary.",
		"AllowedPattern" : ".+"
	},
	"LatestLinuxAmiId" : {
		"Type" : "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
		"Description" : "Which machine image should be used for the demo? Amazon Linux 2 is recommended.",
		"Default" : "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2",
		"AllowedPattern" : "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2",
		"ConstraintDescription" : "At this time this has only been tested on the default value."
	}
  },
  "Mappings" : {
	"IpAddressesForEnv" : {
		"WebAppVPC" : {	"WebAppVPCCidr" : "10.0.0.0/16", "WebAppPublicSubnetAZ1" : "10.0.0.0/24", "WebAppWebSubnetAZ1" : "10.0.1.0/24", "WebAppDbSubnetAZ1" : "10.0.2.0/24", "WebAppPublicSubnetAZ2" : "10.0.128.0/24", "WebAppWebSubnetAZ2" : "10.0.129.0/24", "WebAppDbSubnetAZ2" : "10.0.130.0/24"},
		"BastionVPC" : { "BastionVPCCidr" : "10.1.0.0/16", "BastionSubnetAZ1" : "10.1.0.0/24", "BastionSubnetAZ2" : "10.1.128.0/24"},
		"PoCVPC" : { "PoCVPCCidr" : "10.250.0.0/16", "PoCPublicSubnetAZ1" : "10.250.0.0/24", "PoCPrivateSubnetAZ1" : "10.250.1.0/24", "PoCPublicSubnetAZ2" : "10.250.128.0/24", "PoCPrivateSubnetAZ2" : "10.250.129.0/24"},
		"OnPrem" : {"OnPremCidr" : "192.168.0.0/16"}
	}
  },
  "Resources" : {
	"WebAppVPC" : {
		"Type" : "AWS::EC2::VPC",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppVPCCidr"]},
			"EnableDnsHostnames" : "True",
			"EnableDnsSupport" : "True",
			"Tags" : [ { "Key" : "Name", "Value" : "Web Application VPC" } ]
		}
	},
	"BastionVPC" : {
		"Type" : "AWS::EC2::VPC",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]},
			"EnableDnsHostnames" : "True",
			"EnableDnsSupport" : "True",
			"Tags" : [ { "Key" : "Name", "Value" : "Bastion VPC" } ]
		}
	},
	"PoCVPC" : {
		"Type" : "AWS::EC2::VPC",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "PoCVPC", "PoCVPCCidr"]},
			"EnableDnsHostnames" : "True",
			"EnableDnsSupport" : "True",
			"Tags" : [ { "Key" : "Name", "Value" : "Proof of Concept VPC" } ]
		}
	},
	"WebAppInternetGateway" : {
		"Type" : "AWS::EC2::InternetGateway",
		"Properties" : {
			"Tags" : [ { "Key" : "Name", "Value" : "Web App VPC Internet Gateway" } ]
		}
	},
	"PoCInternetGateway" : {
		"Type" : "AWS::EC2::InternetGateway",
		"Properties" : {
			"Tags" : [ { "Key" : "Name", "Value" : "Proof of Concept VPC Internet Gateway" } ]
		}
	},	
	"HostVPNGateway" : {
		"Type" : "AWS::EC2::VPNGateway",
		"Properties" : {
			"Type" : "ipsec.1",
			"Tags" : [ { "Key" : "Name", "Value" : "Mock VPN Gateway" } ]
		}
	},
	"WebAppGWAttachment" : {
		"Type" : "AWS::EC2::VPCGatewayAttachment",
		"Properties" : {
			"InternetGatewayId" : { "Ref" : "WebAppInternetGateway" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
		"DependsOn" : [ "WebAppInternetGateway", "WebAppVPC" ]
	},
	"PoCGWAttachment" : {
		"Type" : "AWS::EC2::VPCGatewayAttachment",
		"Properties" : {
			"InternetGatewayId" : { "Ref" : "PoCInternetGateway" },
			"VpcId" : { "Ref" : "PoCVPC" }
		},
		"DependsOn" : [ "PoCInternetGateway", "PoCVPC" ]
	},
	"BastionGWAttachment" : {
		"Type" : "AWS::EC2::VPCGatewayAttachment",
		"Properties" : {
			"VpnGatewayId" : { "Ref" : "HostVPNGateway" },
			"VpcId" : { "Ref" : "BastionVPC" }
		},
		"DependsOn" : [ "HostVPNGateway", "BastionVPC" ]
	},
	"WebApp2BastionPeer" : {
	   "Type" : "AWS::EC2::VPCPeeringConnection",
	   "Properties" : {
		  "PeerVpcId" : { "Ref" : "WebAppVPC" },
		  "VpcId" : { "Ref" : "BastionVPC" }
	   },
	   "DependsOn" : [ "WebAppVPC", "BastionVPC" ]
	},
	"PoC2BastionPeer" : {
	   "Type" : "AWS::EC2::VPCPeeringConnection",
	   "Properties" : {
		  "PeerVpcId" : { "Ref" : "PoCVPC" },
		  "VpcId" : { "Ref" : "BastionVPC" }
	   },
	   "DependsOn" : [ "PoCVPC", "BastionVPC" ]
	},
	"WebAppPublicSubnetAZ1" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppPublicSubnetAZ1"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App Public Subnet in AZ1" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
	   "DependsOn" : "WebAppVPC"
	},
	"WebAppWebSubnetAZ1" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppWebSubnetAZ1"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App Web Subnet in AZ1" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
	   "DependsOn" : "WebAppVPC"
	},
	"WebAppDbSubnetAZ1" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppDbSubnetAZ1"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App DB Subnet in AZ1" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
	   "DependsOn" : "WebAppVPC"
	},
	"WebAppPublicSubnetAZ2" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppPublicSubnetAZ2"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App Public Subnet in AZ2" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
	   "DependsOn" : "WebAppVPC"
	},
	"WebAppWebSubnetAZ2" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppWebSubnetAZ2"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App Web Subnet in AZ2" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
	   "DependsOn" : "WebAppVPC"
	},
	"WebAppDbSubnetAZ2" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppDbSubnetAZ2"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App DB Subnet in AZ2" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
	   "DependsOn" : "WebAppVPC"
	},
	"BastionSubnetAZ1" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionSubnetAZ1"]},
			"MapPublicIpOnLaunch" : "false",
			"Tags" : [ { "Key" : "Name" , "Value" : "Bastion Subnet in AZ1" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			"VpcId" : { "Ref" : "BastionVPC" }
		},
	   "DependsOn" : "BastionVPC"
	},
	"BastionSubnetAZ2" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionSubnetAZ2"]},
			"MapPublicIpOnLaunch" : "false",
			"Tags" : [ { "Key" : "Name" , "Value" : "Bastion Subnet in AZ2" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			"VpcId" : { "Ref" : "BastionVPC" }
		},
	   "DependsOn" : "BastionVPC"
	},
	"PoCPublicSubnetAZ1" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "PoCVPC", "PoCPublicSubnetAZ1"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Proof of Concept Public Subnet in AZ1" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			"VpcId" : { "Ref" : "PoCVPC" }
		},
	   "DependsOn" : "PoCVPC"
	},
	"PoCPrivateSubnetAZ1" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "PoCVPC", "PoCPrivateSubnetAZ1"]},
			"MapPublicIpOnLaunch" : "false",
			"Tags" : [ { "Key" : "Name" , "Value" : "Proof of Concept Private Subnet in AZ1" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
			"VpcId" : { "Ref" : "PoCVPC" }
		},
	   "DependsOn" : "PoCVPC"
	},
	"PoCPublicSubnetAZ2" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "PoCVPC", "PoCPublicSubnetAZ2"]},
			"MapPublicIpOnLaunch" : "true",
			"Tags" : [ { "Key" : "Name" , "Value" : "Proof of Concept Public Subnet in AZ2" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			"VpcId" : { "Ref" : "PoCVPC" }
		},
	   "DependsOn" : "PoCVPC"
	},
	"PoCPrivateSubnetAZ2" : {
		"Type" : "AWS::EC2::Subnet",
		"Properties" : {
			"CidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "PoCVPC", "PoCPrivateSubnetAZ2"]},
			"MapPublicIpOnLaunch" : "false",
			"Tags" : [ { "Key" : "Name" , "Value" : "Proof of Concept Private Subnet in AZ2" } ],
			"AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
			"VpcId" : { "Ref" : "PoCVPC" }
		},
	   "DependsOn" : "PoCVPC"
	},
	"WebAppEipAZ1" : {
		"Type" : "AWS::EC2::EIP",
		"Properties" : {
			"Domain" : "vpc"
		}
	},
	"WebAppNatGatewayAZ1" : {
		"Type" : "AWS::EC2::NatGateway",
		"Properties" : {
			"AllocationId" : { "Fn::GetAtt" : ["WebAppEipAZ1", "AllocationId"] },
			"SubnetId" : { "Ref" : "WebAppPublicSubnetAZ1" }
		},
		"DependsOn" : [ "WebAppPublicSubnetAZ1", "WebAppEipAZ1" ]
	},
	"WebAppPublicRouteTable" : {
		"Type" : "AWS::EC2::RouteTable",
		"Properties" : {
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App VPC Public Route Table" } ],
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
		"DependsOn" : "WebAppVPC"
	},
	"WebAppIGRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : "0.0.0.0/0",
			"GatewayId" : { "Ref" : "WebAppInternetGateway" },
			"RouteTableId" : { "Ref" : "WebAppPublicRouteTable" }
		},
		"DependsOn" : [ "WebAppGWAttachment" , "WebAppPublicRouteTable" ]
	},
	"WebAppPublicPeeringRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]},
			"VpcPeeringConnectionId" : { "Ref" : "WebApp2BastionPeer" },
			"RouteTableId" : { "Ref" : "WebAppPublicRouteTable" }
		},
		"DependsOn" : [ "WebApp2BastionPeer" , "WebAppPublicRouteTable" ]
	},
	"WebAppPrivateRouteTable" : {
		"Type" : "AWS::EC2::RouteTable",
		"Properties" : {
			"Tags" : [ { "Key" : "Name" , "Value" : "Web App VPC Private Route Table" } ],
			"VpcId" : { "Ref" : "WebAppVPC" }
		},
		"DependsOn" : "WebAppVPC"
	},
	"WebAppPrivatePeeringRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]},
			"VpcPeeringConnectionId" : { "Ref" : "WebApp2BastionPeer" },
			"RouteTableId" : { "Ref" : "WebAppPrivateRouteTable" }
		},
		"DependsOn" : [ "WebApp2BastionPeer" , "WebAppPrivateRouteTable" ]
	},
	"WebAppPrivateNatRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : "0.0.0.0/0",
			"NatGatewayId" : { "Ref" : "WebAppNatGatewayAZ1" },
			"RouteTableId" : { "Ref" : "WebAppPrivateRouteTable" }
		},
		"DependsOn" : [ "WebAppNatGatewayAZ1" , "WebAppPrivateRouteTable" ]
	},
	"WebAppPublicRoutingAssocAZ1" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "WebAppPublicRouteTable" },
			"SubnetId" : { "Ref" : "WebAppPublicSubnetAZ1" }
		},
		"DependsOn" : [ "WebAppPublicSubnetAZ1" , "WebAppPublicRouteTable" ]
	},
	"WebAppPublicRoutingAssocAZ2" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "WebAppPublicRouteTable" },
			"SubnetId" : { "Ref" : "WebAppPublicSubnetAZ2" }
		},
		"DependsOn" : [ "WebAppPublicSubnetAZ2" , "WebAppPublicRouteTable" ]
	},
	"WebAppDbRoutingAssocAZ1" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "WebAppPublicRouteTable" },
			"SubnetId" : { "Ref" : "WebAppDbSubnetAZ1" }
		},
		"DependsOn" : [ "WebAppDbSubnetAZ1" , "WebAppPublicRouteTable" ]
	},
	"WebAppDbRoutingAssocAZ2" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "WebAppPublicRouteTable" },
			"SubnetId" : { "Ref" : "WebAppDbSubnetAZ2" }
		},
		"DependsOn" : [ "WebAppDbSubnetAZ2" , "WebAppPublicRouteTable" ]
	},
	"WebAppWebRoutingAssocAZ1" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "WebAppPrivateRouteTable" },
			"SubnetId" : { "Ref" : "WebAppWebSubnetAZ1" }
		},
		"DependsOn" : [ "WebAppWebSubnetAZ1" , "WebAppPrivateRouteTable" ]
	},
	"WebAppWebRoutingAssocAZ2" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "WebAppPrivateRouteTable" },
			"SubnetId" : { "Ref" : "WebAppWebSubnetAZ2" }
		},
		"DependsOn" : [ "WebAppWebSubnetAZ2" , "WebAppPrivateRouteTable" ]
	},
	"BastionPrivateRouteTable" : {
		"Type" : "AWS::EC2::RouteTable",
		"Properties" : {
			"Tags" : [ { "Key" : "Name" , "Value" : "Bastion VPC Private Route Table" } ],
			"VpcId" : { "Ref" : "BastionVPC" }
		},
		"DependsOn" : "BastionVPC"
	},
	"BastionPrivateOnPremRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "OnPrem", "OnPremCidr"]},
			"GatewayId" : { "Ref" : "HostVPNGateway" },
			"RouteTableId" : { "Ref" : "BastionPrivateRouteTable" }
		},
		"DependsOn" : [ "BastionGWAttachment" , "BastionPrivateRouteTable" ]
	},
	"BastionPrivatePeeringRoute1" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppVPCCidr"]},
			"VpcPeeringConnectionId" : { "Ref" : "WebApp2BastionPeer" },
			"RouteTableId" : { "Ref" : "BastionPrivateRouteTable" }
		},
		"DependsOn" : [ "WebApp2BastionPeer" , "BastionPrivateRouteTable" ]
	},
	"BastionPrivateRoutingAssocAZ1" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "BastionPrivateRouteTable" },
			"SubnetId" : { "Ref" : "BastionSubnetAZ1" }
		},
		"DependsOn" : [ "BastionSubnetAZ1" , "BastionPrivateRouteTable" ]
	},
	"BastionPrivateRoutingAssocAZ2" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "BastionPrivateRouteTable" },
			"SubnetId" : { "Ref" : "BastionSubnetAZ2" }
		},
		"DependsOn" : [ "BastionSubnetAZ2" , "BastionPrivateRouteTable" ]
	},
	"PoCPublicRouteTable" : {
		"Type" : "AWS::EC2::RouteTable",
		"Properties" : {
			"Tags" : [ { "Key" : "Name" , "Value" : "Proof of Concept VPC Public Route Table" } ],
			"VpcId" : { "Ref" : "PoCVPC" }
		},
		"DependsOn" : "PoCVPC"
	},
	"PoCIGRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : "0.0.0.0/0",
			"GatewayId" : { "Ref" : "PoCInternetGateway" },
			"RouteTableId" : { "Ref" : "PoCPublicRouteTable" }
		},
		"DependsOn" : [ "PoCGWAttachment" , "PoCPublicRouteTable" ]
	},
	"PoCPublicPeeringRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]},
			"VpcPeeringConnectionId" : { "Ref" : "PoC2BastionPeer" },
			"RouteTableId" : { "Ref" : "PoCPublicRouteTable" }
		},
		"DependsOn" : [ "PoC2BastionPeer" , "PoCPublicRouteTable" ]
	},
	"PoCPrivateRouteTable" : {
		"Type" : "AWS::EC2::RouteTable",
		"Properties" : {
			"Tags" : [ { "Key" : "Name" , "Value" : "Proof of Concept VPC Private Route Table" } ],
			"VpcId" : { "Ref" : "PoCVPC" }
		},
		"DependsOn" : "PoCVPC"
	},
	"PoCPrivatePeeringRoute" : {
		"Type" : "AWS::EC2::Route",
		"Properties" : {
			"DestinationCidrBlock" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]},
			"VpcPeeringConnectionId" : { "Ref" : "PoC2BastionPeer" },
			"RouteTableId" : { "Ref" : "PoCPrivateRouteTable" }
		},
		"DependsOn" : [ "PoC2BastionPeer" , "PoCPrivateRouteTable" ]
	},
	"PoCPublicRoutingAssocAZ1" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "PoCPublicRouteTable" },
			"SubnetId" : { "Ref" : "PoCPublicSubnetAZ1" }
		},
		"DependsOn" : [ "PoCPublicSubnetAZ1" , "PoCPublicRouteTable" ]
	},
	"PoCPublicRoutingAssocAZ2" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "PoCPublicRouteTable" },
			"SubnetId" : { "Ref" : "PoCPublicSubnetAZ2" }
		},
		"DependsOn" : [ "PoCPublicSubnetAZ2" , "PoCPublicRouteTable" ]
	},
	"PoCPrivateRoutingAssocAZ1" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "PoCPrivateRouteTable" },
			"SubnetId" : { "Ref" : "PoCPrivateSubnetAZ1" }
		},
		"DependsOn" : [ "PoCPrivateSubnetAZ1" , "PoCPrivateRouteTable" ]
	},
	"PoCPrivateRoutingAssocAZ2" : {
		"Type" : "AWS::EC2::SubnetRouteTableAssociation",
		"Properties" : {
			"RouteTableId" : { "Ref" : "PoCPrivateRouteTable" },
			"SubnetId" : { "Ref" : "PoCPrivateSubnetAZ2" }
		},
		"DependsOn" : [ "PoCPrivateSubnetAZ2" , "PoCPrivateRouteTable" ]
	},
	"WebAppLoadBalancerSecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
			"GroupName" : "WebApp Application Load Balancer Security Group",
			"GroupDescription" : "Opens HTTP for Load Balancer to the Internet",
			"VpcId" : { "Ref" : "WebAppVPC" },
			"SecurityGroupIngress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 80,
				"ToPort" : 80,
				"CidrIp" : "0.0.0.0/0"
			 }]
		},
		"DependsOn" : "WebAppVPC"
	},
	"WebAppWebServerSecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
			"GroupName" : "WebApp Web Server Security Group",
			"GroupDescription" : "Opens HTTP for Web Servers to Load Balancer",
			"VpcId" : { "Ref" : "WebAppVPC" },
			"SecurityGroupIngress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 80,
				"ToPort" : 80,
				"SourceSecurityGroupId" : { "Ref" : "WebAppLoadBalancerSecurityGroup" }
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 22,
				"ToPort" : 22,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 3389,
				"ToPort" : 3389,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			}]
		},
		"DependsOn" : [ "WebAppVPC" , "WebAppLoadBalancerSecurityGroup" ]
	},
	"WebAppLB2ServerSecurityGroupRule" : {
		"Type": "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
			"IpProtocol" : "tcp",
			"FromPort" : 80,
			"ToPort" : 80,
			"DestinationSecurityGroupId" : { 
				"Fn::GetAtt" : [ "WebAppWebServerSecurityGroup", "GroupId" ]
			},
			"GroupId" : {
				"Fn::GetAtt" : [ "WebAppLoadBalancerSecurityGroup", "GroupId" ]
			}
		},
		"DependsOn" : [ "WebAppWebServerSecurityGroup" , "WebAppLoadBalancerSecurityGroup" ]
	},
	"WebAppDbServerSecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
			"GroupName" : "WebApp Database Server Security Group",
			"GroupDescription" : "Opens mysql (3306) port for Database Servers to Web Servers",
			"VpcId" : { "Ref" : "WebAppVPC" },
			"SecurityGroupIngress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 3306,
				"ToPort" : 3306,
				"CidrIp" : "0.0.0.0/0"
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 22,
				"ToPort" : 22,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 3389,
				"ToPort" : 3389,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			}]
		},
		"DependsOn" : [ "WebAppVPC" , "WebAppWebServerSecurityGroup" ]
	},
	"BastionServerSecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
			"GroupName" : "Bastion Server Security Group",
			"GroupDescription" : "Opens SSH and RDP ports inbound and outbound",
			"VpcId" : { "Ref" : "BastionVPC" },
			"SecurityGroupIngress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 22,
				"ToPort" : 22,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "OnPrem", "OnPremCidr"]}
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 3389,
				"ToPort" : 3389,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "OnPrem", "OnPremCidr"]}
			}],			
			"SecurityGroupEgress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 22,
				"ToPort" : 22,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppVPCCidr"]}
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 3389,
				"ToPort" : 3389,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "WebAppVPC", "WebAppVPCCidr"]}
			}]
		},
		"DependsOn" : "BastionVPC"
	},
	"PoCServerAZ1SecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
			"GroupName" : "PoC Web Server Security Group for AZ1",
			"GroupDescription" : "Opens HTTP for Proof of Concept Web Servers in AZ1 to the internet",
			"VpcId" : { "Ref" : "PoCVPC" },
			"SecurityGroupIngress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 80,
				"ToPort" : 80,
				"CidrIp" : "0.0.0.0/0"
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 22,
				"ToPort" : 22,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 3389,
				"ToPort" : 3389,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			}]
		},
		"DependsOn" : "PoCVPC"
	},
	"PoCServerAZ2SecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
			"GroupName" : "PoC Web Server Security Group for AZ2",
			"GroupDescription" : "Opens HTTP for Proof of Concept Web Servers in AZ2 to the internet",
			"VpcId" : { "Ref" : "PoCVPC" },
			"SecurityGroupIngress" : [{
				"IpProtocol" : "tcp",
				"FromPort" : 443,
				"ToPort" : 443,
				"CidrIp" : "0.0.0.0/0"
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 22,
				"ToPort" : 22,
				"CidrIp" : "0.0.0.0/0"
			},{
				"IpProtocol" : "tcp",
				"FromPort" : 3389,
				"ToPort" : 3389,
				"CidrIp" : { "Fn::FindInMap" : [ "IpAddressesForEnv", "BastionVPC", "BastionVPCCidr"]}
			}]
		},
		"DependsOn" : "PoCVPC"
	},
	"SharedServerConnectivityRole" : {
		"Type" : "AWS::IAM::Role",
		"Properties" : {		
			"AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
			"RoleName" : "SharedServerConnectivityRole"
		}
	},
	"SharedServerConnectivityProfile" : {
		"Type": "AWS::IAM::InstanceProfile",
		"Properties": {
			"Roles" : [ { "Ref" : "SharedServerConnectivityRole" } ],
			"InstanceProfileName" : "SharedServerConnectivityProfile"
		},
		"DependsOn" : "SharedServerConnectivityRole"
	},
	"SharedServerConnectivityPolicy" : {
		"Type" : "AWS::IAM::Policy",
		"Properties" : {
			"Roles" : [ { "Ref" : "SharedServerConnectivityRole" } ],
			"PolicyName" : "SharedServerConnectivityPolicy",
			"PolicyDocument" : {
				"Version" : "2012-10-17",
				"Statement": [
					{
						"Effect": "Allow",
						"Action": [
							"ssm:UpdateInstanceInformation",
							"ssmmessages:CreateControlChannel",
							"ssmmessages:CreateDataChannel",
							"ssmmessages:OpenControlChannel",
							"ssmmessages:OpenDataChannel",
							"ssm:DescribeAssociation",
							"ssm:ListAssociations",
							"ssm:ListInstanceAssociations",
							"ssm:PutInventory",
							"ssm:PutComplianceItems",
							"ssm:UpdateAssociationStatus",
							"ssm:UpdateInstanceAssociationStatus",
							"ssm:UpdateInstanceInformation",
							"ssm:GetDocument",
							"ssm:DescribeDocument"
						],
						"Resource": "*"
					},
					{
						"Effect": "Allow",
						"Action": [
							"s3:GetEncryptionConfiguration"
						],
						"Resource": "*"
					}
				]
			}		
		},
		"DependsOn" : "SharedServerConnectivityRole"
	},
	"WebAppServerAZ1": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "WebAppWebServerSecurityGroup" }
					],
					"SubnetId": { "Ref": "WebAppWebSubnetAZ1" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install",
					"sudo yum install httpd -y",
					"sudo systemctl start httpd",
					"sudo systemctl restart rsyslog"
					]]
				}
			},
			"Tags" : [
				{ "Key" : "Name", "Value" : "Web Server for AZ1" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "WebAppWebServerSecurityGroup" , "WebAppWebSubnetAZ1" , "SharedServerConnectivityProfile"]
	},
	"WebAppServerAZ2": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "WebAppWebServerSecurityGroup" }
					],
					"SubnetId": { "Ref": "WebAppWebSubnetAZ2" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install",
					"sudo yum install httpd -y",
					"sudo systemctl start httpd",
					"sudo systemctl restart rsyslog"
					]]
				}
			},
			"Tags" : [
				{ "Key" : "Name", "Value" : "Web Server for AZ2" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "WebAppWebServerSecurityGroup" , "WebAppWebSubnetAZ2" , "SharedServerConnectivityProfile"]
	},
	"DbServerAZ1": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "WebAppDbServerSecurityGroup" }
					],
					"SubnetId": { "Ref": "WebAppDbSubnetAZ1" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install",
					"wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm",
					"sudo yum install mysql80-community-release-el7-1.noarch.rpm -y",
					"sudo yum install mysql-community-server -y",
					"sudo service mysqld start",
					"sudo systemctl restart rsyslog"
					]]
				}
			},
			"Tags" : [
				{"Key" : "Name", "Value" : "Database Server for AZ1" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "WebAppDbServerSecurityGroup" , "WebAppDbSubnetAZ1" , "SharedServerConnectivityProfile"]
	},
	"DbServerAZ2": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "WebAppDbServerSecurityGroup" }
					],
					"SubnetId": { "Ref": "WebAppDbSubnetAZ2" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install",
					"wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm",
					"sudo yum install mysql80-community-release-el7-1.noarch.rpm -y",
					"sudo yum install mysql-community-server -y",
					"sudo service mysqld start",
					"sudo systemctl restart rsyslog"
					]]
				}
			},
			"Tags" : [
				{"Key" : "Name", "Value" : "Database Server for AZ2" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "WebAppDbServerSecurityGroup" , "WebAppDbSubnetAZ2" , "SharedServerConnectivityProfile"]
	},
	"BastionAZ1": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "BastionServerSecurityGroup" }
					],
					"SubnetId": { "Ref": "BastionSubnetAZ1" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install"
					]]
				}
			},
			"Tags" : [
				{"Key" : "Name", "Value" : "Bastion Server for AZ1" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "BastionServerSecurityGroup" , "BastionSubnetAZ1" , "SharedServerConnectivityProfile"]
	},
	"BastionAZ2": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "BastionServerSecurityGroup" }
					],
					"SubnetId": { "Ref": "BastionSubnetAZ2" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install"
					]]
				}
			},
			"Tags" : [
				{"Key" : "Name", "Value" : "Bastion Server for AZ2" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "BastionServerSecurityGroup" , "BastionSubnetAZ2" , "SharedServerConnectivityProfile"]
	},
	"PoCServerAZ1": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "PoCServerAZ1SecurityGroup" }
					],
					"SubnetId": { "Ref": "PoCPublicSubnetAZ1" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install",
					"sudo yum install httpd -y",
					"sudo systemctl start httpd",
					"wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm",
					"sudo yum install mysql80-community-release-el7-1.noarch.rpm -y",
					"sudo yum install mysql-community-server -y",
					"sudo service mysqld start",
					"sudo systemctl restart rsyslog"
					]]
				}
			},
			"Tags" : [
				{"Key" : "Name", "Value" : "PoC Web Server for AZ1" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "PoCServerAZ1SecurityGroup" , "PoCPublicSubnetAZ1" , "SharedServerConnectivityProfile"]
	},
	"PoCServerAZ2": {
		"Type": "AWS::EC2::Instance",		
		"Properties": {
			"InstanceType": "t2.micro",
			"KeyName": { "Ref" : "PassedKeyName" },
			"ImageId": { "Ref" : "LatestLinuxAmiId" },
			"IamInstanceProfile" : { "Ref" : "SharedServerConnectivityProfile" },
			"NetworkInterfaces": [
				{
					"DeviceIndex": 0,
					"GroupSet": [
						{ "Ref" : "PoCServerAZ2SecurityGroup" }
					],
					"SubnetId": { "Ref": "PoCPublicSubnetAZ2" }
				}
			],
			"UserData": {
				"Fn::Base64" : { "Fn::Join" : ["\n", [
					"#!/bin/bash -xe",
					"sudo yum update -y",
					"wget https://inspector-agent.amazonaws.com/linux/latest/install",
					"sudo bash install",
					"sudo yum install httpd -y",
					"sudo systemctl start httpd",
					"wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm",
					"sudo yum install mysql80-community-release-el7-1.noarch.rpm -y",
					"sudo yum install mysql-community-server -y",
					"sudo service mysqld start",
					"sudo systemctl restart rsyslog"
					]]
				}
			},
			"Tags" : [
				{"Key" : "Name", "Value" : "PoC Web Server for AZ2" },
				{"Key" : "NetworkReachabilityDemo", "Value" : "True"}
			]
		},
		"DependsOn" : [ "PoCServerAZ2SecurityGroup" , "PoCPublicSubnetAZ2" , "SharedServerConnectivityProfile"]
	},
	"WebAppLoadBalancer" : {
		"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
		"Properties" : {
			"Name" : "WebAppLoadBalancer",
			"SecurityGroups" : [ { "Ref" : "WebAppLoadBalancerSecurityGroup" } ],
			"Tags" : [ {"Key" : "NetworkReachabilityDemo", "Value" : "True"}],
			"Subnets" : [{ "Ref" : "WebAppPublicSubnetAZ1" }, { "Ref" : "WebAppPublicSubnetAZ2" } ]
		},
		"DependsOn" : [ "WebAppPublicSubnetAZ1" , "WebAppPublicSubnetAZ2", "WebAppLoadBalancerSecurityGroup" ]
	},
	"WebAppLoadBalancerTarget" : {
		"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
		"Properties" : {
			"HealthCheckIntervalSeconds" : 60,
			"HealthCheckPort" : 80,
			"Name" : "WebServerTargetGroup",
			"Port": 80,
			"Protocol" : "HTTP",
			"Targets" : [
				{ "Id" : { "Ref" : "WebAppServerAZ1" } },
				{ "Id" : { "Ref" : "WebAppServerAZ2" } }
			],
			"VpcId": { "Ref" : "WebAppVPC" }			
		},
		"DependsOn" : [ "WebAppServerAZ1", "WebAppServerAZ2" ]
	},
	"WebAppLoadBalancerListener" : {
		"Type" : "AWS::ElasticLoadBalancingV2::Listener",
		"Properties" : {
			"DefaultActions" : [ {
				"TargetGroupArn" : { "Ref" : "WebAppLoadBalancerTarget" },
				"Type" : "forward"
			} ],
			"LoadBalancerArn" : { "Ref" : "WebAppLoadBalancer" },
			"Port" : 80,
			"Protocol" : "HTTP"
		},
		"DependsOn" : [ "WebAppLoadBalancer" , "WebAppLoadBalancerTarget" ]
	},
	"SNSTopicForInspector" : {
		"Type": "AWS::SNS::Topic",
		"Properties" : {
			"DisplayName" : "InspectorAutomation",
			"TopicName" : "InspectorAutomation"
		}
	},
	"SNSTopicForInspectorPolicy" : {
		"Type" : "AWS::SNS::TopicPolicy",
		"Properties" : {
			"PolicyDocument" :  {
				"Id" : "InspectorTopicPolicy",
				"Version" : "2012-10-17",
				"Statement" : [ {
					"Sid": "owner-policy-statement",
						"Effect": "Allow",
						"Principal": {
						  "AWS": "*"
						},
						"Action": [
						  "SNS:Publish",
						  "SNS:RemovePermission",
						  "SNS:SetTopicAttributes",
						  "SNS:DeleteTopic",
						  "SNS:ListSubscriptionsByTopic",
						  "SNS:GetTopicAttributes",
						  "SNS:Receive",
						  "SNS:AddPermission",
						  "SNS:Subscribe"
						],
						"Resource": { "Ref": "SNSTopicForInspector" },
						"Condition": {
						  "StringEquals": {
							"AWS:SourceOwner": { "Ref": "AWS::AccountId" }
						  }
						}
					  },
				{
					"Sid" : "Statement10001",
					"Effect" : "Allow",
					"Principal" : {
					   "Service" : "inspector.amazonaws.com"
					},
					"Action" : "sns:Publish",
					"Resource" : { "Ref" : "SNSTopicForInspector" }
				} ]
			},
			"Topics" : [ { "Ref" : "SNSTopicForInspector" } ]
		}
	},
	"LambdaRemediationNACL" : {
		"DependsOn": [ "SNSTopicForInspector", "LambdaRemediationRole" ],
		"Type": "AWS::Lambda::Function",
		"Properties": {
			"FunctionName": {
				"Fn::Join": [
					"-",
					[
						"NetworkReachabilityDemo",
						"remediation",
						"nacl"
					]
				]
			},
			"Handler": "index.handler",
			"Role" : { "Fn::GetAtt" : [ "LambdaRemediationRole", "Arn" ] },
			"Code" : {
				"ZipFile" : { "Fn::Join" : ["\n", [
					"import boto3",
					"import json",
					"import logging",
					"",
					"inspector = boto3.client('inspector')",
					"logger = logging.getLogger()",
					"logger.setLevel(logging.INFO)",
					"",
					"def handler(event, context):",
					"",
					"    logger.info('Raw Lambda event:')",
					"    logger.info(event)",
					"",
					"    # extract the message that Inspector sent via SNS",
					"    # message = json.loads(event['Records'][0]['Sns']['Message'])",
					"    message = event",
					"    # logger.debug('Event from SNS: ' + message)",
					"",
					"    # get inspector notification type",
					"    notificationType = message['detail-type']",
					"    logger.info('Inspector SNS message type: ' + notificationType)",
					"",
					"    # skip everything except report_finding notifications",
					"    if notificationType != 'Inspector2 Finding':",
					"        logger.info(",
					"            'Skipping notification that is not a new finding: ' + notificationType)",
					"        return 1",
					"",
					"    # extract finding ARN",
					"    findingArn = message['detail']['findingArn']",
					"    logger.info('Finding ARN: ' + findingArn)",
					"",
					"    # skip uninteresting findings",
					"    title = message['detail']['title']",
					"    logger.info('Finding title: ' + title)",
					"",
					"    # Look for the Internet Accessible Instances with SSH open",
					"    if 'is reachable from an Internet Gateway' in title and message['detail']['networkReachabilityDetails']['openPortRange']['begin'] == 22:",
					"        logger.info('Port 22 Finding. Will update NACL.')",
					"        naclId = None",
					"",
					"        steps = message['detail']['networkReachabilityDetails']['networkPath']['steps']",
					"        for step in steps:",
					"            if step['componentType'] == 'AWS::EC2::NetworkAcl':",
					"                print(step)",
					"                naclId = step['componentId']",
					"        ",
					"        logger.info(f'Updating NACL {naclId}')",
					"        ",
					"        ec2 = boto3.client('ec2')",
					"        response = ec2.create_network_acl_entry(",
					"            DryRun=False,",
					"            Egress=False,",
					"            NetworkAclId=naclId,",
					"            CidrBlock='0.0.0.0/0',",
					"            Protocol='6',",
					"            PortRange={",
					"                'From': 22,",
					"                'To': 22",
					"            },",
					"            RuleAction='deny',",
					"            RuleNumber=90",
					"        )",
					"        print('log - - Event: NACL Deny Rule for Recognized port with listener reachable from internet')",
					"        return response",
					"    else:",
					"        logger.info('Skipping finding: ' + title)",
					"        return 1",
					"",
					"    return"
				]]}
			},
			"Runtime": "python3.9",
			"Timeout": "35"
		}
	},
	"LambdaRemediationNACLInvokePermissions": {
		"DependsOn": "LambdaRemediationNACL",
		"Type": "AWS::Lambda::Permission",
		"Properties": {
			"FunctionName": { "Ref" : "LambdaRemediationNACL" },
			"Action": "lambda:InvokeFunction",
			"Principal": "events.amazonaws.com"
		}
	},
	"LambdaRemediationRole": {
		"Type": "AWS::IAM::Role",
		"Properties": {
			"RoleName": {
				"Fn::Join": [
					"-",
					[
						"NetworkReachabilityDemo",
						"lambda",
						"remediation"
					]
				]
			},
			"AssumeRolePolicyDocument": {
				"Version" : "2012-10-17",
				"Statement": [
					{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}
				]
			},
			"Path": "/",
			"Policies": [
				{
					"PolicyName": "RemediationPolicy",
					"PolicyDocument": {
						"Version" : "2012-10-17",
						"Statement": [
							{
								"Effect": "Allow",
								"Action": [
									"inspector:ListRulesPackages",
									"inspector:StartAssessmentRun",
									"inspector:SubscribeToEvent",
									"inspector:SetTagsForResource",
									"inspector:Describe*",
									"ec2:CreateTags",
									"ec2:Describe*",
									"ec2:*NetworkAcl*",
									"iam:CreateServiceLinkedRole"
								],
								"Resource": "*"
							},
							{
								"Effect": "Allow",
								"Action": [
									"logs:CreateLogGroup",
									"logs:CreateLogStream",
									"logs:PutLogEvents"
								],
								"Resource": "*"
							}
						]
					}
				}
			]
		}
	}
   },
   "Outputs" : {
	"LoadBalancerFullDNS" : {
		"Description" : "DNS Name of the Load Balancer for the WebApp Web Server",
		"Value" : { "Fn::GetAtt" : [ "WebAppLoadBalancer", "DNSName" ] },
		"Export" : {
			"Name" : { "Fn::Sub" : "${AWS::StackName}-LbDns" }
		}
	},
	"PoCWebServer1PublicDNS" : {
		"Description" : "Public DNS Name of the PoC Server in AZ1",
		"Value" : { "Fn::GetAtt" : [ "PoCServerAZ1", "PublicDnsName" ] }
	},
	"PoCWebServer2PublicDNS" : {
		"Description" : "Public DNS Name of the PoC Server in AZ2",
		"Value" : { "Fn::GetAtt" : [ "PoCServerAZ2", "PublicDnsName" ] }
	},
	"WebServer1InstanceID" : {
		"Description" : "Instance ID for the Web Server in AZ1",
		"Value" : { "Ref" : "WebAppServerAZ1"}
	},
	"WebServer2InstanceID" : {
		"Description" : "Instance ID for the Web Server in AZ2",
		"Value" : { "Ref" : "WebAppServerAZ2"}
	},
	"DatabaseServer1InstanceID" : {
		"Description" : "Instance ID for the Database Server in AZ1",
		"Value" : { "Ref" : "DbServerAZ1"}
	},
	"DatabaseServer2InstanceID" : {
		"Description" : "Instance ID for the Database Server in AZ2",
		"Value" : { "Ref" : "DbServerAZ2"}
	},
	"BastionServer1InstanceID" : {
		"Description" : "Instance ID for the Bastion Server in AZ1",
		"Value" : { "Ref" : "BastionAZ1"}
	},
	"BastionServer2InstanceID" : {
		"Description" : "Instance ID for the Bastion Server in AZ2",
		"Value" : { "Ref" : "BastionAZ2"}
	},
	"POCServer1InstanceID" : {
		"Description" : "Instance ID for the Proof of Concept Server in AZ1",
		"Value" : { "Ref" : "PoCServerAZ1"}
	},
	"POCServer2InstanceID" : {
		"Description" : "Instance ID for the Proof of Concept Server in AZ2",
		"Value" : { "Ref" : "PoCServerAZ2"}
	}
   }
}